Parameters:
    EnvironmentName:
        Description: An Environment name that will be prefixed to resource.
        Type: String
# whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
Resources:
    #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
    #ProfileWithRolesForOurApp:
    #    Type: AWS::IAM::InstanceProfile
    #    Properties: 
    #        Roles:
    #        - UdagramS3ReadOnlyEC2
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow http to our load balancer
            SecurityGroupEgress: 
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupIngress: 
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            Tags: 
                - Key: name
                  Value: !Ref EnvironmentName
            VpcId: 
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow http to our hosts and SSH from local only
            SecurityGroupIngress: 
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress: 
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0
            Tags: 
                - Key: name
                  Value: !Ref EnvironmentName
            VpcId: 
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            BlockDeviceMappings: 
                - DeviceName: "/dev/sdk"
                  Ebs:
                    VolumeSize: '10'
            ImageId: ami-005bdb005fb00e791
            InstanceType: t3.medium
            #IamInstanceProfile: "ProfileWithRolesForOurApp"
            SecurityGroups: 
                - Ref: WebServerSecGroup
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    sudo apt-get update -y
                    sudo apt-get install unzip awscli -y
                    sudo apt-get install apache2 -y
                    sudo systemctl start apache2.service
                    cd /var/www/html
                    sudo aws s3 cp s3://udacity-demo-1/udacity.zip --no-sign-request . 
                    sudo unzip -o udacity.zip
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties: 
            VPCZoneIdentifier:
            - Fn::ImportValue:
                !Sub "${EnvironmentName}-PRI-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: '4'
            MaxSize: '6' 
            TargetGroupARNs:
            - Ref: WebAppTargetGroup
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
            - Fn::ImportValue: 
                !Sub "${EnvironmentName}-PUB1-SN"
            - Fn::ImportValue: 
                !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups:
            - Ref: LBSecGroup
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn:
                Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: '80'
            Protocol: HTTP
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions: 
            - Type: forward
              TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties: 
            HealthCheckIntervalSeconds: 35
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 30
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"

Outputs:
    LoadBalancerDNS:
        Description: The DNSName of the load Balancer
        Value: !Join ['', [ 'http://', !GetAtt WebAppLB.DNSName]]
        Export:
            Name: !Sub ${EnvironmentName}-DNS
